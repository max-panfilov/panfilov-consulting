// @ts-nocheck
#!/usr/bin/env tsx

/**
 * CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * –ó–∞–ø—É—Å–∫: pnpm recreate:homepage
 * –¢—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ dev —Å–µ—Ä–≤–µ—Ä–∞
 */

import 'dotenv/config'

const API_URL = process.env.NEXT_PUBLIC_SERVER_URL?.replace(':3000', ':3002') || 'http://localhost:3002'
const SEED_SECRET = process.env.SEED_SECRET || process.env.CRON_SECRET

async function main() {
  console.log('üè† Starting homepage recreation...')
  console.log(`   API URL: ${API_URL}`)

  if (!SEED_SECRET) {
    console.warn('‚ö†Ô∏è  No SEED_SECRET found in .env - endpoint may be protected')
  }

  try {
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (SEED_SECRET) {
      headers['Authorization'] = `Bearer ${SEED_SECRET}`
    }

    const response = await fetch(`${API_URL}/api/seed-homepage`, {
      method: 'POST',
      headers,
    })

    const data = await response.json()

    if (!response.ok || !data.success) {
      throw new Error(data.error || 'Unknown error occurred')
    }

    console.log('‚úÖ Homepage created successfully!')
    console.log(`   - Page ID: ${data.pageId}`)
  } catch (error: any) {
    console.error('‚ùå Error creating homepage:')
    console.error(error.message)
    console.log('\nüîç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ dev —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: pnpm dev')
    process.exit(1)
  }
}

main()
