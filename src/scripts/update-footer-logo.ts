#!/usr/bin/env tsx

/**
 * CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ —Ñ—É—Ç–µ—Ä–µ —á–µ—Ä–µ–∑ Payload Local API
 * –ó–∞–ø—É—Å–∫: pnpm update:footer
 */

import 'dotenv/config'
import { getPayload } from 'payload'
import configPromise from '@payload-config'

async function main() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ Local API...')

  try {
    const payload = await getPayload({ config: configPromise })

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const context = { disableRevalidate: true }

    const result = await payload.updateGlobal({
      slug: 'footer',
      context,
      data: {
        logo: {
          src: '/logo.svg',
          alt: 'Panfilov Consulting',
          title: 'Panfilov Consulting',
        },
        tagline: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
        copyright: `¬© ${new Date().getFullYear()} Panfilov Consulting. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.`,
        menuItems: [
          {
            title: '–ü—Ä–æ–¥—É–∫—Ç',
            links: [
              { text: '–ì–ª–∞–≤–Ω–∞—è', url: '/' },
              { text: '–ö–µ–π—Å—ã', url: '/#cases' },
              { text: '–ë–ª–æ–≥', url: '/posts' },
            ],
          },
          {
            title: '–ö–æ–º–ø–∞–Ω–∏—è',
            links: [
              { text: '–û –Ω–∞—Å', url: '/#about' },
              { text: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', url: '/#form' },
            ],
          },
        ],
        bottomLinks: [
          { text: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', url: '/privacy' },
        ],
      },
    })

    console.log('‚úÖ –§—É—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!')
    console.log(`   - –õ–æ–≥–æ—Ç–∏–ø: ${result.logo?.src}`)
    console.log(`   - –°–ª–æ–≥–∞–Ω: ${result.tagline}`)
    console.log(`   - –°–µ–∫—Ü–∏–π –º–µ–Ω—é: ${result.menuItems?.length || 0}`)

    // –Ø–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    process.exit(0)
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ—É—Ç–µ—Ä–∞:')
    console.error(error.message)
    if (error.stack) {
      console.error('\n\nStack trace:')
      console.error(error.stack)
    }
    process.exit(1)
  }
}

main()
