/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ Payload REST API
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 *    export PAYLOAD_EMAIL="your@email.com"
 *    export PAYLOAD_PASSWORD="your_password"
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: tsx scripts/create-home-page.ts
 */

const API_URL = process.env.NEXT_PUBLIC_SERVER_URL || 'https://panfilov.consulting'
const API_ENDPOINT = `${API_URL}/api/pages`
const LOGIN_ENDPOINT = `${API_URL}/api/users/login`

// –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const EMAIL = process.env.PAYLOAD_EMAIL
const PASSWORD = process.env.PAYLOAD_PASSWORD

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const homePageData = {
  title: '–ì–ª–∞–≤–Ω–∞—è',
  slug: 'home',
  // Hero —Å–µ–∫—Ü–∏—è (Lexical —Ñ–æ—Ä–º–∞—Ç)
  hero: {
    type: 'lowImpact', // 'lowImpact' –Ω–µ —Ç—Ä–µ–±—É–µ—Ç media, –¥–ª—è 'highImpact' –∏ 'mediumImpact' –Ω—É–∂–Ω–æ media
    richText: {
      root: {
        type: 'root',
        direction: 'ltr',
        format: '',
        indent: 0,
        version: 1,
        children: [
          {
            children: [
              {
                detail: 0,
                format: 0,
                mode: 'normal',
                style: '',
                text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç Panfilov Consulting',
                type: 'text',
                version: 1,
              },
            ],
            direction: 'ltr',
            format: '',
            indent: 0,
            type: 'paragraph',
            version: 1,
          },
        ],
      },
    },
  },
  // –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –±–ª–æ–∫–∏ (Lexical —Ñ–æ—Ä–º–∞—Ç)
  layout: [
    {
      blockType: 'content',
      columns: [
        {
          size: 'full',
          richText: {
            root: {
              type: 'root',
              direction: 'ltr',
              format: '',
              indent: 0,
              version: 1,
              children: [
                {
                  children: [
                    {
                      detail: 0,
                      format: 0,
                      mode: 'normal',
                      style: '',
                      text: '–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.',
                      type: 'text',
                      version: 1,
                    },
                  ],
                  direction: 'ltr',
                  format: '',
                  indent: 0,
                  type: 'paragraph',
                  version: 1,
                },
              ],
            },
          },
        },
      ],
    },
    {
      blockType: 'cta',
      richText: {
        root: {
          type: 'root',
          direction: 'ltr',
          format: '',
          indent: 0,
          version: 1,
          children: [
            {
              children: [
                {
                  detail: 0,
                  format: 0,
                  mode: 'normal',
                  style: '',
                  text: '–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É?',
                  type: 'text',
                  version: 1,
                },
              ],
              direction: 'ltr',
              format: '',
              indent: 0,
              type: 'paragraph',
              version: 1,
            },
          ],
        },
      },
      links: [
        {
          link: {
            type: 'custom',
            url: '/contact',
            label: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏',
          },
        },
      ],
    },
  ],
  // SEO –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  meta: {
    title: 'Panfilov Consulting - –ì–ª–∞–≤–Ω–∞—è',
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
  },
  publishedAt: new Date().toISOString(),
  _status: 'published', // –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function login(): Promise<string> {
  if (!EMAIL || !PASSWORD) {
    throw new Error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã PAYLOAD_EMAIL –∏–ª–∏ PAYLOAD_PASSWORD –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  }

  console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...')
  
  const response = await fetch(LOGIN_ENDPOINT, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      email: EMAIL,
      password: PASSWORD,
    }),
  })

  if (!response.ok) {
    const errorText = await response.text()
    throw new Error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${response.status}, ${errorText}`)
  }

  const result = await response.json()
  console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
  return result.token
}

async function createHomePage() {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const token = await login()
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...')
    console.log(`üìç API URL: ${API_ENDPOINT}`)

    const response = await fetch(API_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `JWT ${token}`,
      },
      body: JSON.stringify(homePageData),
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`)
    }

    const result = await response.json()
    console.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
    console.log('üìÑ ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', result.doc.id)
    console.log('üîó Slug:', result.doc.slug)
    console.log('\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:')
    console.log(JSON.stringify(result, null, 2))

    return result
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error)
    throw error
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
createHomePage()
  .then(() => {
    console.log('\nüéâ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\nüí• –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error)
    process.exit(1)
  })
